{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MainBody","Component","props","handleScroll","e","setState","devInfo","toggleHover","data","newhoverStatus","state","hoverstatus","event","icon","id","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","backgroundType","Configs","devIntro","devDesc","icons","className","onScroll","this","map","key","target","rel","href","url","image","onMouseEnter","onMouseLeave","role","AboutMe","handleRequest","axios","get","instaLink","instaUsername","instaQuerry","then","response","instaProfilePic","graphql","user","profile_pic_url_hd","catch","error","console","log","finally","heading","aboutDev","src","Project","gitHubLink","gitHubUsername","gitHubQuerry","projectsArray","slice","project","value","ProjectCard","handleUpdatetime","date","Date","pushed_at","diff","getTime","hours","Math","trunc","updated_at","toString","day","getDate","monthIndex","getMonth","year","getFullYear","stargazers_count","download_url","svn_url","name","description","languages_url","class","Language","array","total_count","index","push","language","Footer","bgStyle","backgroundColor","style","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ba2db51.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typist from \"react-typist\";\nimport \"./App.css\";\nimport Configs from \"./configurations.json\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-light bg-transparent fixed-top\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Navbar\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavAltMarkup\"\n          aria-controls=\"navbarNavAltMarkup\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div className=\"navbar-nav\">\n            <a className=\"nav-item nav-link active\" href=\"#\">\n              Home <span className=\"sr-only\">(current)</span>\n            </a>\n            <a className=\"nav-item nav-link\" href=\"#\">\n              Features\n            </a>\n            <a className=\"nav-item nav-link\" href=\"#\">\n              Pricing\n            </a>\n            <a\n              className=\"nav-item nav-link disabled\"\n              href=\"#\"\n              tabIndex=\"-1\"\n              aria-disabled=\"true\"\n            >\n              Disabled\n            </a>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nclass MainBody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundType: Configs.backgroundType,\n      devInfo: Configs.devIntro,\n      devDesc: Configs.devDesc,\n      hoverstatus: [\"socialicons\", \"socialicons\", \"socialicons\", \"socialicons\"]\n    };\n  }\n\n  handleScroll = e => {\n    this.setState({ devInfo: \"Hashir Shoaib\" });\n    // console.log(\"scroll trigered\");\n  };\n\n  toggleHover = data => {\n    const newhoverStatus = [...this.state.hoverstatus];\n    if (data.event === \"enter\") {\n      newhoverStatus[data.icon.id] = \"socialiconshover\";\n      this.setState({ hoverstatus: newhoverStatus });\n      if (data.icon.id === 0) {\n      }\n    } else {\n      newhoverStatus[data.icon.id] = \"socialicons\";\n      this.setState({ hoverstatus: newhoverStatus });\n      if (data.icon.id === 0) {\n      }\n    }\n  };\n  componentDidMount = () => {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  };\n\n  render() {\n    const icons = Configs.icons;\n    return (\n      <div className=\"jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\">\n        <div className=\" container container-fluid text-center \">\n          <h1 className=\"display-1\" onScroll={this.handleScroll}>\n            {this.state.devInfo}\n          </h1>\n          <Typist className=\"lead\"> {this.state.devDesc}</Typist>\n          <div className=\" p-5\">\n            {icons.map(icon => (\n              <a\n                key={icon.id}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`${icon.url}`}\n              >\n                <i\n                  className={`fab ${icon.image}  fa-3x ${\n                    this.state.hoverstatus[icon.id]\n                  }`}\n                  onMouseEnter={() =>\n                    this.toggleHover({ icon: icon, event: \"enter\" })\n                  }\n                  onMouseLeave={() =>\n                    this.toggleHover({ icon: icon, event: \"leave\" })\n                  }\n                />\n              </a>\n            ))}\n          </div>\n\n          <a\n            className=\"btn btn-outline-light btn-lg\"\n            href=\"#divaboutme\"\n            role=\"button\"\n          >\n            More about me\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass AboutMe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      heading: \"About me\",\n      aboutDev: Configs.aboutDev,\n      instaProfilePic: \"bad request\"\n    };\n  }\n\n  componentDidMount = () => {\n    this.handleRequest();\n  };\n\n  handleRequest = e => {\n    // console.log(\"request trigered\");\n    axios\n      .get(Configs.instaLink + Configs.instaUsername + Configs.instaQuerry)\n      .then(response => {\n        // handle success\n        // console.log(response.data.graphql);\n        this.setState({\n          instaProfilePic: response.data.graphql.user.profile_pic_url_hd\n        });\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .finally(function() {\n        // always executed\n      });\n  };\n\n  render() {\n    return (\n      <div id=\"divaboutme\" className=\"jumbotron jumbotron-fluid m-0\">\n        <div className=\" container container-fluid p-5\">\n          <div className=\"row\">\n            <div className=\" col-5 d-none d-lg-block align-self-center\">\n              <img\n                className=\" border border-secondary rounded-circle\"\n                src={this.state.instaProfilePic}\n              ></img>\n            </div>\n            <div className=\" col-lg-7\">\n              <h1 className=\"display-4 mb-5 text-center\">\n                {this.state.heading}\n              </h1>\n              <p className=\" lead text-center\">{this.state.aboutDev}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Project extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      heading: \"Recent Projects\",\n      projectsArray: []\n    };\n  }\n\n  componentDidMount = () => {\n    this.handleRequest();\n  };\n\n  handleRequest = e => {\n    // console.log(\"github request trigered\");\n    axios\n      .get(Configs.gitHubLink + Configs.gitHubUsername + Configs.gitHubQuerry)\n      .then(response => {\n        // handle success\n        // console.log(response.data.slice(0, 4));\n        this.setState({\n          projectsArray: response.data.slice(0, 4)\n        });\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .finally(function() {\n        // always executed\n      });\n  };\n\n  render() {\n    return (\n      <div\n        id=\"divproject\"\n        className=\"jumbotron jumbotron-fluid bg-transparent m-0\"\n      >\n        <div className=\" container container-fluid p-5\">\n          <h1 className=\"display-4 pb-5\">{this.state.heading}</h1>\n          <div className=\" row\">\n            {this.state.projectsArray.map(project => (\n              <ProjectCard\n                key={project.id}\n                id={project.id}\n                value={project}\n              ></ProjectCard>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ProjectCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.value,\n      updated_at: \"0 mints\",\n      stargazers_count: this.props.value.stargazers_count,\n      download_url: this.props.value.svn_url + \"/archive/master.zip\"\n    };\n  }\n  componentDidMount = () => {\n    this.handleUpdatetime();\n  };\n  handleUpdatetime = () => {\n    const date = new Date(this.state.value.pushed_at);\n    const nowdate = new Date();\n    var diff = nowdate.getTime() - date.getTime();\n    var hours = Math.trunc(diff / 1000 / 60 / 60);\n    if (hours < 24) {\n      this.setState({ updated_at: hours.toString() + \" hours ago\" });\n    } else {\n      var monthNames = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n      ];\n      var day = date.getDate();\n      var monthIndex = date.getMonth();\n      var year = date.getFullYear();\n      this.setState({\n        updated_at: \"on \" + day + \" \" + monthNames[monthIndex] + \" \" + year\n      });\n    }\n  };\n\n  render() {\n    // https://api.github.com/repos/hashirshoaeb/home/languages\n    // pushed_at stargazers_count updated_at\n    return (\n      <div className=\"col-md-6\">\n        <div className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\n          {/* <img src=\"\" className=\"card-img-top\" alt=\"...\" /> */}\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{this.state.value.name} </h5>\n            <p className=\"card-text\">{this.state.value.description} </p>\n\n            <a\n              href={this.state.download_url}\n              className=\" btn btn-outline-secondary\"\n            >\n              <i className=\"fab fa-github\" /> Clone Project\n            </a>\n\n            <hr />\n\n            <Language value={this.state.value.languages_url}></Language>\n\n            <p className=\"card-text\">\n              <a href=\"\" className=\" text-dark card-link mr-4\">\n                <i className=\"fab fa-github\" /> Stars{\" \"}\n                <span class=\"badge badge-dark\">\n                  {this.state.stargazers_count}\n                </span>\n              </a>\n              <small className=\"text-muted\">\n                Updated {this.state.updated_at}\n              </small>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Language extends Component {\n  state = {\n    data: []\n  };\n  componentDidMount = () => {\n    this.handleRequest();\n  };\n  handleRequest = () => {\n    axios\n      .get(this.props.value)\n      .then(response => {\n        // handle success\n        console.log(response.data);\n        this.setState({ data: response.data });\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .finally(function() {\n        // always executed\n      });\n  };\n\n  render() {\n    const array = [];\n    var total_count = 0;\n    for (var index in this.state.data) {\n      array.push(index);\n      total_count = total_count + this.state.data[index];\n      // console.log(index, this.state.data[index]);\n    }\n    // console.log(\"array contains \", array, this.state.data[array[0]]);\n    return (\n      <div className=\"pb-3\">\n        Languages:{\" \"}\n        {array.map(language => (\n          <a key={language} className=\"badge badge-light card-link\">\n            {language}:{\" \"}\n            {Math.trunc((this.state.data[language] / total_count) * 1000) / 10}{\" \"}\n            %\n          </a>\n        ))}\n      </div>\n    );\n  }\n}\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgStyle: { backgroundColor: \"#f5f5f5\" }\n    };\n  }\n  render() {\n    return (\n      <footer style={this.state.bgStyle} className=\" mt-auto py-3 text-center\">\n        {/* <strong> &copy; 2019 </strong>*/}\n        <i className=\"fas fa-code\"></i> with <i className=\"fas fa-heart\"></i> by{\" \"}\n        Hashir Shoaib using <i className=\"fab fa-react\"></i>\n        <p>\n          <small className=\"text-muted\">\n            {\" \"}\n            Project code is open source. Feel free to fork and make your own\n            version.\n          </small>\n        </p>\n      </footer>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <Navbar></Navbar> */}\n        <MainBody></MainBody>\n        <AboutMe></AboutMe>\n        <Project></Project>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}