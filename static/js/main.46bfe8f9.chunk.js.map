{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MainBody","Component","props","handleScroll","e","setState","devInfo","console","log","toggleHover","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","state","backgroundType","devDesc","icons","image","url","socialicons","color","paddingLeft","paddingRight","transition","className","onScroll","this","map","icon","target","rel","href","style","onMouseEnter","onMouseLeave","role","ProjectCard","class","src","alt","Footer","bgStyle","backgroundColor","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAsDMA,G,mCA7CeC,Y,YA8CnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA2BRC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEC,QAAS,kBACzBC,QAAQC,IAAI,oBA9BK,EAgCnBC,YAAc,SAAAL,GACZG,QAAQC,IAAI,mBAjCK,EAmCnBE,kBAAoB,WAClBC,OAAOC,iBAAiB,SAAU,EAAKT,eApCtB,EAuCnBU,qBAAuB,WACrBF,OAAOG,oBAAoB,SAAU,EAAKX,eAtC1C,EAAKY,MAAQ,CACXC,eAAgB,WAChBV,QAAS,gBACTW,QACE,oMACFC,MAAO,CACL,CACEC,MAAO,YACPC,IAAK,mCAEP,CACED,MAAO,cACPC,IAAK,0CAEP,CACED,MAAO,eACPC,IAAK,4CAEP,CACED,MAAO,cACPC,IAAK,gDAtBM,E,sEA2CT,IAAD,OACDC,EAAc,CAClBC,MAAO,QACPC,YAAa,MACbC,aAAc,MACdC,WAAY,YAEd,OACE,yBAAKC,UAAU,oHACb,yBAAKA,UAAU,2CACb,wBAAIA,UAAU,YAAYC,SAAUC,KAAKzB,cACtCyB,KAAKb,MAAMT,SAEd,uBAAGoB,UAAU,QACX,kBAAC,IAAD,KAASE,KAAKb,MAAME,UAGtB,yBAAKS,UAAU,QACZE,KAAKb,MAAMG,MAAMW,IAAI,SAAAC,GAAI,OACxB,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAI,UAAKH,EAAKV,MACzD,uBACEM,UAAS,cAASI,EAAKX,MAAd,WACTe,MAAOb,EACPc,aAAc,EAAK1B,YACnB2B,aAAc,EAAK3B,kBAM3B,uBAAGiB,UAAU,yBAAyBO,KAAK,IAAII,KAAK,UAApD,oB,GA1EapC,cAsIjBqC,GAnDgBrC,YA8BAA,Y,YAsBpB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,GAFI,E,sEAKjB,OACE,yBAAKwB,MAAM,QACT,yBAAKC,IAAI,MAAMD,MAAM,eAAeE,IAAI,QACxC,yBAAKF,MAAM,aACT,wBAAIA,MAAM,cAAV,cACA,uBAAGA,MAAM,aAAT,qIAIA,uBAAGA,MAAM,aACP,2BAAOA,MAAM,cAAb,kC,GAhBctC,cAwBpByC,E,YACJ,WAAYxC,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACX4B,QAAS,CAAEC,gBAAiB,YAHb,E,sEAOjB,OACE,4BAAQV,MAAON,KAAKb,MAAM4B,QAASjB,UAAU,6BAC3C,+CADF,2B,GATezB,aAmCN4C,E,YAlBb,WAAY3C,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,GAFI,E,sEAMjB,OACE,6BAEE,kBAAC,EAAD,MAGA,kBAAC,EAAD,W,GAbUd,aCxNE6C,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.46bfe8f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typist from \"react-typist\";\nimport \"./App.css\";\nimport Configs from \"./configurations.json\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-light bg-transparent fixed-top\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Navbar\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavAltMarkup\"\n          aria-controls=\"navbarNavAltMarkup\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div className=\"navbar-nav\">\n            <a className=\"nav-item nav-link active\" href=\"#\">\n              Home <span className=\"sr-only\">(current)</span>\n            </a>\n            <a className=\"nav-item nav-link\" href=\"#\">\n              Features\n            </a>\n            <a className=\"nav-item nav-link\" href=\"#\">\n              Pricing\n            </a>\n            <a\n              className=\"nav-item nav-link disabled\"\n              href=\"#\"\n              tabindex=\"-1\"\n              aria-disabled=\"true\"\n            >\n              Disabled\n            </a>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nclass MainBody extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundType: \"gradient\",\n      devInfo: \"Hashir Shoaib\",\n      devDesc:\n        \"🧔🏻Engineer | Programmer | 👨🏻‍💻Web Developer | 📸 Photographer | 🥋Athlete | 👩‍🎨 Artist\",\n      icons: [\n        {\n          image: \"fa-github\",\n          url: \"https://github.com/hashirshoaeb\"\n        },\n        {\n          image: \"fa-facebook\",\n          url: \"https://www.facebook.com/hashir.shoaeb\"\n        },\n        {\n          image: \"fa-instagram\",\n          url: \"https://www.instagram.com/hashir.shoaeb/\"\n        },\n        {\n          image: \"fa-linkedin\",\n          url: \"https://www.linkedin.com/in/hashir-shoaeb/\"\n        }\n      ]\n    };\n  }\n\n  handleScroll = e => {\n    this.setState({ devInfo: \"Hashir Shoaib\" });\n    console.log(\"scroll trigered\");\n  };\n  toggleHover = e => {\n    console.log(\"hover trigered\");\n  };\n  componentDidMount = () => {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  };\n\n  render() {\n    const socialicons = {\n      color: \"white\",\n      paddingLeft: \"5px\",\n      paddingRight: \"5px\",\n      transition: \"all 0.8s\"\n    };\n    return (\n      <div className=\"jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center flex-wrap m-0\">\n        <div className=\" container container-fluid text-center \">\n          <h1 className=\"display-1\" onScroll={this.handleScroll}>\n            {this.state.devInfo}\n          </h1>\n          <p className=\"lead\">\n            <Typist>{this.state.devDesc}</Typist>\n          </p>\n\n          <div className=\" p-5\">\n            {this.state.icons.map(icon => (\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${icon.url}`}>\n                <i\n                  className={`fab ${icon.image}  fa-3x`}\n                  style={socialicons}\n                  onMouseEnter={this.toggleHover}\n                  onMouseLeave={this.toggleHover}\n                />\n              </a>\n            ))}\n          </div>\n\n          <a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">\n            Learn more\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass AboutMe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      heading: \"About me\",\n      devDesc: \"asdj kjahs jash yg tf rdfhjg jaygd hjgbv jbhvhc\"\n    };\n  }\n  render() {\n    return (\n      <div className=\"jumbotron jumbotron-fluid m-0\">\n        <div className=\" container container-fluid p-5\">\n          <h1 className=\"display-1\">{this.state.heading}</h1>\n          <p className=\"lead\">\n            <Typist>{this.state.devDesc}</Typist>\n          </p>\n          <hr className=\"my-4\" />\n          <p>\n            It uses utility classes for typography and spacing to space content\n            out within the larger container.\n          </p>\n          <a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">\n            Learn more\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Project extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      heading: \"My Projects\"\n    };\n  }\n  render() {\n    return (\n      <div className=\"jumbotron jumbotron-fluid m-0\">\n        <div className=\" container container-fluid p-5\">\n          <h1 className=\"display-1\">{this.state.heading}</h1>\n          <div className=\" card-columns\">\n            <ProjectCard></ProjectCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ProjectCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div class=\"card\">\n        <img src=\"...\" class=\"card-img-top\" alt=\"...\" />\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">Card title</h5>\n          <p class=\"card-text\">\n            This is a longer card with supporting text below as a natural\n            lead-in to additional content. This content is a little bit longer.\n          </p>\n          <p class=\"card-text\">\n            <small class=\"text-muted\">Last updated 3 mins ago</small>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgStyle: { backgroundColor: \"#f5f5f5\" }\n    };\n  }\n  render() {\n    return (\n      <footer style={this.state.bgStyle} className=\" mt-auto py-3 text-center\">\n        <strong> &copy; 2019 </strong> Built with Reactjs\n      </footer>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <Navbar></Navbar> */}\n        <MainBody></MainBody>\n        {/* <AboutMe></AboutMe> */}\n        {/* <Project></Project> */}\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       darkBackgroundModes: [\"day\"],\n//       lightBackgroundModes: [\"night\"],\n//       backgroundType: Configs.backgroundType || \"plain\",\n//       appClass: Configs.plainBackgroundMode || \"daylight\",\n//       devIntro: Configs.devIntro || \"Lorem Ipsum\",\n//       devDesc:\n//         Configs.devDesc ||\n//         \"Aute veniam ut deserunt cillum irure pariatur Lorem dolore anim nostrud quis veniam elit culpa.\",\n//       backgroundMode: \"default\",\n//       backgroundIndex: 0,\n//       bgStyle: {},\n//       icons: Configs.icons || []\n//     };\n//   }\n\n//   componentWillMount = () => {\n//     if (this.checkIfPlainTypeEnabled()) {\n//       return true;\n//     } else if (this.checkIfGradientTypeEnabled()) {\n//       this.setState({\n//         appClass: \"gradient\",\n//         bgStyle: this.prepareGradientStyleSheets()\n//       });\n//     }\n//   };\n\n//   checkIfNightModeEnabled = () => {\n//     return (\n//       this.state.backgroundType === \"plain\" &&\n//       this.state.appClass === \"nightlight\"\n//     );\n//   };\n\n//   checkIfDayModeEnabled = () => {\n//     return (\n//       this.state.backgroundType === \"plain\" &&\n//       this.state.appClass === \"daylight\"\n//     );\n//   };\n\n//   checkIfGradientTypeEnabled = () => {\n//     return this.state.backgroundType === \"gradient\";\n//   };\n\n//   checkIfPlainTypeEnabled = () => {\n//     return this.state.backgroundType === \"plain\";\n//   };\n\n//   prepareGradientStyleSheets = () => {\n//     if (Configs.gradientColors) {\n//       return {\n//         background: \"linear-gradient(-45deg, \" + Configs.gradientColors + \")\",\n//         backgroundSize: \"400% 400%\"\n//       };\n//     } else {\n//       return {\n//         background:\n//           \"linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB)\",\n//         backgroundSize: \"400% 400%\"\n//       };\n//     }\n//   };\n\n//   getDefaultModeBasedOnBackgroundType = () => {\n//     if (this.checkIfNightModeEnabled()) {\n//       return this.state.lightBackgroundModes[0];\n//     } else if (this.checkIfDayModeEnabled()) {\n//       return this.state.darkBackgroundModes[0];\n//     }\n//   };\n\n//   changeThemeMode = e => {\n//     if (this.checkIfNightModeEnabled()) {\n//       this.setState({\n//         appClass: \"daylight\",\n//         backgroundIndex: 0,\n//         backgroundMode: this.state.darkBackgroundModes[0]\n//       });\n//     } else if (this.checkIfDayModeEnabled()) {\n//       this.setState({\n//         appClass: \"nightlight\",\n//         backgroundIndex: 0,\n//         backgroundMode: this.state.lightBackgroundModes[0]\n//       });\n//     }\n//   };\n\n//   render() {\n//     const {\n//       appClass,\n//       bgStyle,\n//       backgroundMode,\n//       devIntro,\n//       devDesc,\n//       icons\n//     } = this.state;\n\n//     return (\n//       <div className={appClass} style={bgStyle}>\n//         <div className=\"change-mode\" onClick={this.changeThemeMode} />\n//         <div className={backgroundMode}>\n//           <main className=\"App-main\">\n//             <h1 className=\"intro\">{devIntro}</h1>\n//             <div className=\"tagline\">\n//               <Typist>{devDesc}</Typist>\n//             </div>\n//             <div className=\"icons-social\">\n//               {icons.map(icon => (\n//                 <a\n//                   target=\"_blank\"\n//                   rel=\"noopener noreferrer\"\n//                   href={`${icon.url}`}\n//                 >\n//                   <i className={`fab ${icon.image}`} />\n//                 </a>\n//               ))}\n//             </div>\n//           </main>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}